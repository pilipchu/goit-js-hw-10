{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\"\nimport \"flatpickr/dist/flatpickr.min.css\"\nimport iziToast from \"izitoast\"\nimport \"izitoast/dist/css/iziToast.min.css\"\n\nconst button = document.querySelector('button[data-start]')\nconst textDays = document.querySelector('span[data-days]')\nconst textHours = document.querySelector('span[data-hours]')\nconst textMinutes = document.querySelector('span[data-minutes]')\nconst textSeconds = document.querySelector('span[data-seconds]')\n\nlet userSelectedDate = 0\nlet intervalId = null\n\nbutton.disabled = true\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n    onClose(selectedDates) {\n        if (selectedDates[0]<options.defaultDate) {\n            iziToast.error({\n                title: 'Error',\n                message: 'Please choose a date in the future',\n                maxWidth: 400,\n                position: \"topRight\",\n            });\n             clear()\n        } else {\n            clear()\n            userSelectedDate = selectedDates[0]\n            button.disabled = false\n        }\n    },\n};\n\nfunction clear() {\n    clearInterval(intervalId)\n    textDays.textContent = '00'\n    textHours.textContent = '00'\n textMinutes.textContent = '00'\n textSeconds.textContent = '00'\n}\n\nfunction getDate() {\n    const nowDate = userSelectedDate - new Date\n    if(nowDate<0)return\n    convertMs(nowDate)\n    console.log(nowDate)\n}\n\nflatpickr(\"#datetime-picker\", options);\n\nfunction convertMs(ms) {\n        // Number of milliseconds per unit of time\n        const second = 1000;\n        const minute = second * 60;\n        const hour = minute * 60;\n        const day = hour * 24;\n\n        // Remaining days\n        textDays.textContent = Math.floor(ms / day).toString().padStart(2, '0');\n        // Remaining hours\n        textHours.textContent = Math.floor((ms % day) / hour).toString().padStart(2, '0');\n        // Remaining minutes\n        textMinutes.textContent = Math.floor(((ms % day) % hour) / minute).toString().padStart(2, '0');\n        // Remaining seconds\n        textSeconds.textContent = Math.floor((((ms % day) % hour) % minute) / second).toString().padStart(2, '0');\n}\n\nbutton.addEventListener('click', () => {\n         button.disabled = true\n   intervalId = setInterval(() => {\n       getDate()\n       }, 1000)}\n)\n\n\n\n\n\n\n\n\n"],"names":["button","textDays","textHours","textMinutes","textSeconds","userSelectedDate","intervalId","options","selectedDates","iziToast","clear","getDate","nowDate","convertMs","flatpickr","ms"],"mappings":"2GAKA,MAAMA,EAAS,SAAS,cAAc,oBAAoB,EACpDC,EAAW,SAAS,cAAc,iBAAiB,EACnDC,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAc,SAAS,cAAc,oBAAoB,EAE/D,IAAIC,EAAmB,EACnBC,EAAa,KAEjBN,EAAO,SAAW,GAElB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACf,QAAQC,EAAe,CACfA,EAAc,CAAC,EAAED,EAAQ,aACzBE,EAAS,MAAM,CACX,MAAO,QACP,QAAS,qCACT,SAAU,IACV,SAAU,UAC1B,CAAa,EACAC,EAAO,IAERA,EAAO,EACPL,EAAmBG,EAAc,CAAC,EAClCR,EAAO,SAAW,GAEzB,CACL,EAEA,SAASU,GAAQ,CACb,cAAcJ,CAAU,EACxBL,EAAS,YAAc,KACvBC,EAAU,YAAc,KAC3BC,EAAY,YAAc,KAC1BC,EAAY,YAAc,IAC3B,CAEA,SAASO,GAAU,CACf,MAAMC,EAAUP,EAAmB,IAAI,KACpCO,EAAQ,IACXC,EAAUD,CAAO,EACjB,QAAQ,IAAIA,CAAO,EACvB,CAEAE,EAAU,mBAAoBP,CAAO,EAErC,SAASM,EAAUE,EAAI,CAQfd,EAAS,YAAc,KAAK,MAAMc,EAAK,KAAG,EAAE,WAAW,SAAS,EAAG,GAAG,EAEtEb,EAAU,YAAc,KAAK,MAAOa,EAAK,MAAO,IAAI,EAAE,SAAU,EAAC,SAAS,EAAG,GAAG,EAEhFZ,EAAY,YAAc,KAAK,MAAQY,EAAK,MAAO,KAAQ,GAAM,EAAE,SAAU,EAAC,SAAS,EAAG,GAAG,EAE7FX,EAAY,YAAc,KAAK,MAASW,EAAK,MAAO,KAAQ,IAAU,GAAM,EAAE,SAAQ,EAAG,SAAS,EAAG,GAAG,CAChH,CAEAf,EAAO,iBAAiB,QAAS,IAAM,CAC9BA,EAAO,SAAW,GACxBM,EAAa,YAAY,IAAM,CAC3BK,EAAS,CACR,EAAE,GAAI,CAAC,CACf"}