{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\"\nimport \"flatpickr/dist/flatpickr.min.css\"\nimport iziToast from \"izitoast\"\nimport \"izitoast/dist/css/iziToast.min.css\"\n\nconst button = document.querySelector('button[data-start]')\nconst textDays = document.querySelector('span[data-days]')\nconst textHours = document.querySelector('span[data-hours]')\nconst textMinutes = document.querySelector('span[data-minutes]')\nconst textSeconds = document.querySelector('span[data-seconds]')\n\nlet userSelectedDate = 0\nlet intervalId = null\n\nbutton.disabled = true\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n    onClose(selectedDates) {\n        if ((selectedDates[0] - options.defaultDate) < 0) {\n            iziToast.error({\n                title: 'Error',\n                message: 'Please choose a date in the future',\n                maxWidth: 400,\n                position: \"topRight\",\n                iconUrl: './img/close_black_24dp.svg'\n            });\n            clearInterval(intervalId)\n            textDays.textContent = '00'\n            textHours.textContent = '00'\n            textMinutes.textContent = '00'\n            textSeconds.textContent = '00'\n            \n        } else {\n            userSelectedDate = selectedDates[0] - new Date()\n            button.disabled = false\n        }\n    },\n};\n\nflatpickr(\"#datetime-picker\", options);\n\nfunction convertMs(ms) {\n    if(userSelectedDate < 0) return\n        // Number of milliseconds per unit of time\n        const second = 1000;\n        const minute = second * 60;\n        const hour = minute * 60;\n        const day = hour * 24;\n\n        // Remaining days\n        textDays.textContent = Math.floor(ms / day).toString().padStart(2, '0');\n        // Remaining hours\n        textHours.textContent = Math.floor((ms % day) / hour).toString().padStart(2, '0');\n        // Remaining minutes\n        textMinutes.textContent = Math.floor(((ms % day) % hour) / minute).toString().padStart(2, '0');\n        // Remaining seconds\n        textSeconds.textContent = Math.floor((((ms % day) % hour) % minute) / second).toString().padStart(2, '0');\n}\n\nbutton.addEventListener('click', () => {\n         button.disabled = true\n   intervalId = setInterval(() => {\n       convertMs(userSelectedDate)\n       userSelectedDate -= 1000\n       if (userSelectedDate < 0) clearInterval(intervalId)\n       }, 1000)}\n)\n\n\n\n\n\n\n\n\n"],"names":["button","textDays","textHours","textMinutes","textSeconds","userSelectedDate","intervalId","options","selectedDates","iziToast","flatpickr","convertMs","ms","second","minute","hour","day"],"mappings":"2GAKA,MAAMA,EAAS,SAAS,cAAc,oBAAoB,EACpDC,EAAW,SAAS,cAAc,iBAAiB,EACnDC,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAc,SAAS,cAAc,oBAAoB,EAE/D,IAAIC,EAAmB,EACnBC,EAAa,KAEjBN,EAAO,SAAW,GAElB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACf,QAAQC,EAAe,CACdA,EAAc,CAAC,EAAID,EAAQ,YAAe,GAC3CE,EAAS,MAAM,CACX,MAAO,QACP,QAAS,qCACT,SAAU,IACV,SAAU,WACV,QAAS,4BACzB,CAAa,EACD,cAAcH,CAAU,EACxBL,EAAS,YAAc,KACvBC,EAAU,YAAc,KACxBC,EAAY,YAAc,KAC1BC,EAAY,YAAc,OAG1BC,EAAmBG,EAAc,CAAC,EAAI,IAAI,KAC1CR,EAAO,SAAW,GAEzB,CACL,EAEAU,EAAU,mBAAoBH,CAAO,EAErC,SAASI,EAAUC,EAAI,CACnB,GAAGP,EAAmB,EAAG,OAErB,MAAMQ,EAAS,IACTC,EAASD,EAAS,GAClBE,EAAOD,EAAS,GAChBE,EAAMD,EAAO,GAGnBd,EAAS,YAAc,KAAK,MAAMW,EAAKI,CAAG,EAAE,WAAW,SAAS,EAAG,GAAG,EAEtEd,EAAU,YAAc,KAAK,MAAOU,EAAKI,EAAOD,CAAI,EAAE,SAAU,EAAC,SAAS,EAAG,GAAG,EAEhFZ,EAAY,YAAc,KAAK,MAAQS,EAAKI,EAAOD,EAAQD,CAAM,EAAE,SAAU,EAAC,SAAS,EAAG,GAAG,EAE7FV,EAAY,YAAc,KAAK,MAASQ,EAAKI,EAAOD,EAAQD,EAAUD,CAAM,EAAE,SAAQ,EAAG,SAAS,EAAG,GAAG,CAChH,CAEAb,EAAO,iBAAiB,QAAS,IAAM,CAC9BA,EAAO,SAAW,GACxBM,EAAa,YAAY,IAAM,CAC3BK,EAAUN,CAAgB,EAC1BA,GAAoB,IAChBA,EAAmB,GAAG,cAAcC,CAAU,CACjD,EAAE,GAAI,CAAC,CACf"}